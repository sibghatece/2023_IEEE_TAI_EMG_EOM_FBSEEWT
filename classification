clc
clear all
close all

%    feat=xlsread('C:\Users\Sibghatullah\Documents\WROK\Covid Papers\Eye ELECTROMYOGRAPHY (EMG) OF THE EXTRAOCULAR MUSCLES (EOM) paper\Full_Features.xlsx');
 feat=xlsread('C:\Users\Sibghatullah\Documents\WROK\Covid Papers\Eye ELECTROMYOGRAPHY (EMG) OF THE EXTRAOCULAR MUSCLES (EOM) paper\First_Revision_IEEE THMS\Feat_TFD2_TD_MFSC.xlsx');
feat=feat(:,1:36);
feat=zscore(feat);
%% Labeleing the class of data 
c1=double(repelem(1,100,1));c4=double(repelem(4,100,1));
c2=double(repelem(2,100,1));c5=double(repelem(5,100,1));
c3=double(repelem(3,100,1));c6=double(repelem(6,100,1));
label=[c1;c2;c3;c4;c5;c6];

opts.kfold=10;
opts.ho=0.2;
opts.tf=2;

%% DT parameters
% pp=1;
% % splits=[4 10 20 40 60 80 100];
% splits=[10 20 40 80];
% 
% minleafsize=[1 2 3];
% splitcrit={'gdi','twoing', 'deviance'};
% for split=1:4
%     for mlf=1:3
%         for spl_cri=1:3
%         opts.nSplit=splits(split); % 100= fine ; medium=20; coarse= 4; 
%         opts.mf= minleafsize(mlf);
%         opts.sc= splitcrit{spl_cri};
%         DT = mDecisionTree(feat,label,opts);
%         dt_conf_mat=DT.con;
%         dt_perforance_measures(pp,:)=khanConfMulticlass(dt_conf_mat);
% %         [DT_res,DT_RefereceResult]=confusion.getValues(dt_conf_mat);
% %         DT_Performance(pp,:)=[DT_res.Accuracy*100 DT_res.Sensitivity*100 DT_res.Specificity*100 DT_res.Precision*100....
% %         DT_res.MatthewsCorrelationCoefficient DT_res.Kappa];
%            
%         pp=pp+1;
% 
%         end
%     end
% end






% %% KNN 
% % Parameters for knn
% pp=1;
% % dist={'cosine', 'cityblock', 'chebychev', 'euclidean', 'minkowski'};
% dist={'cityblock', 'chebychev', 'euclidean'};
% 
% diw= {'equal','inverse','squaredinverse'};
% for kk=[5 10 15 20]
%     for di=1:3
%         for dw=1:3
%             
%             opts.k=kk; % Value of K % Fine KNN K=1; Medium K=10; Coarse K=100; 
%             opts.distance=dist{di}; % others are 'cosine', 'cityblock', 'chebychev', 'euclidean', or 'minkowski'
%             opts.distance_weight= diw{dw}; % equal' (default) | 'inverse' | 'squaredinverse' | 
%             KNN = mKNearestNeighbor(feat,label,opts);
%             knn_conf_mat=KNN.con;
%             knn_perforance_measures(pp,:)=khanConfMulticlass(knn_conf_mat);
% %             [KNN,KNN_RefereceResult]=confusion.getValues(knn_conf_mat);
% %                 KNN_Performance(pp,:)=[KNN.Accuracy*100 KNN.Sensitivity*100 KNN.Specificity*100 KNN.Precision*100....
% %                 KNN.MatthewsCorrelationCoefficient KNN.Kappa];
%             pp=pp+1;
%         end
%     end
% end
% %%
% Multiclass SVM
% Parameters
pp=1
kernels_fun={'linear','polynomial','gaussian','rbf'};
box_constr=[1 10 100];
kernel_sclae=[1 10 100];
for ker_no=1:4
    for box_c=1:3
        for ker_scale=1:3
        
        opts.fun=kernels_fun{ker_no}; % others are 'rbf', 'polynomial','gaussian','linear'
        opts.poly_order=2;
        opts.box_contraints=box_constr(box_c);
        MSVM = mMultiClassSupportVectorMachineECOC(feat,label,opts);
        svm_conf_mat=MSVM.con;
        msvm_perforance_measures(pp,:)=khanConfMulticlass(svm_conf_mat);
%         [SVM,SVM_RefereceResult]=confusion.getValues(svm_conf_mat);
%              SVM_Performance(pp,:)=[SVM.Accuracy*100 SVM.Sensitivity*100 SVM.Specificity*100 SVM.Precision*100....
%              SVM.MatthewsCorrelationCoefficient SVM.Kappa];
        pp=pp+1;
        end
    end
end
% % svm_conf_mat=[89 0 1 2 2 6;0 82 4 11 0 3;6 1 70 17 0 6;1 2 1 93 0 3; 5 0 1 0 91 3;1 1 0 3 5 90];
